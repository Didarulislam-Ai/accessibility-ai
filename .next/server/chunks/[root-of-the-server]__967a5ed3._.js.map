{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///Users/didershine/Documents/accessibility-dashboard/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///Users/didershine/Documents/accessibility-dashboard/lib/stripe.ts"],"sourcesContent":["import Stripe from 'stripe';\nimport { prisma } from './prisma';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2023-10-16',\n});\n\ninterface CreateCheckoutSessionParams {\n  plan: string;\n  email: string;\n  name: string;\n}\n\nexport async function createCheckoutSession({\n  plan,\n  email,\n  name,\n}: CreateCheckoutSessionParams) {\n  // Create or get user\n  let user = await prisma.user.findUnique({\n    where: { email },\n  });\n\n  if (!user) {\n    user = await prisma.user.create({\n      data: {\n        email,\n        name,\n      },\n    });\n  }\n\n  // Create Stripe checkout session\n  const session = await stripe.checkout.sessions.create({\n    customer_email: email,\n    payment_method_types: ['card'],\n    line_items: [\n      {\n        price: plan,\n        quantity: 1,\n      },\n    ],\n    mode: 'subscription',\n    success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/dashboard?session_id={CHECKOUT_SESSION_ID}`,\n    cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/pricing`,\n    metadata: {\n      userId: user.id,\n    },\n  });\n\n  return session;\n}\n\nexport async function handleWebhookEvent(event: Stripe.Event) {\n  switch (event.type) {\n    case 'checkout.session.completed': {\n      const session = event.data.object as Stripe.Checkout.Session;\n      const userId = session.metadata?.userId;\n      const subscriptionId = session.subscription as string;\n\n      if (!userId) {\n        throw new Error('No user ID in session metadata');\n      }\n\n      // Get subscription details\n      const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n      const plan = subscription.items.data[0].price.id;\n\n      // Create subscription in database\n      await prisma.subscription.create({\n        data: {\n          userId,\n          apiKey: generateApiKey(),\n          status: 'active',\n          plan: getPlanFromStripePrice(plan),\n          expiresAt: new Date(subscription.current_period_end * 1000),\n        },\n      });\n\n      break;\n    }\n\n    case 'customer.subscription.updated':\n    case 'customer.subscription.deleted': {\n      const subscription = event.data.object as Stripe.Subscription;\n      const userId = subscription.metadata?.userId;\n\n      if (!userId) {\n        throw new Error('No user ID in subscription metadata');\n      }\n\n      // Update subscription status in database\n      await prisma.subscription.updateMany({\n        where: {\n          userId,\n          status: 'active',\n        },\n        data: {\n          status: subscription.status === 'active' ? 'active' : 'inactive',\n          expiresAt: new Date(subscription.current_period_end * 1000),\n        },\n      });\n\n      break;\n    }\n  }\n}\n\nfunction generateApiKey(): string {\n  return `ak_${Math.random().toString(36).substring(2)}${Date.now().toString(36)}`;\n}\n\nfunction getPlanFromStripePrice(priceId: string): string {\n  const planMap: Record<string, string> = {\n    price_basic: 'basic',\n    price_pro: 'pro',\n    price_enterprise: 'enterprise',\n  };\n\n  return planMap[priceId] || 'basic';\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,wJAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAG;IACxD,YAAY;AACd;AAQO,eAAe,sBAAsB,EAC1C,IAAI,EACJ,KAAK,EACL,IAAI,EACwB;IAC5B,qBAAqB;IACrB,IAAI,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACtC,OAAO;YAAE;QAAM;IACjB;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,MAAM;gBACJ;gBACA;YACF;QACF;IACF;IAEA,iCAAiC;IACjC,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;QACpD,gBAAgB;QAChB,sBAAsB;YAAC;SAAO;QAC9B,YAAY;YACV;gBACE,OAAO;gBACP,UAAU;YACZ;SACD;QACD,MAAM;QACN,aAAa,gFAAoC,2CAA2C,CAAC;QAC7F,YAAY,gFAAoC,QAAQ,CAAC;QACzD,UAAU;YACR,QAAQ,KAAK,EAAE;QACjB;IACF;IAEA,OAAO;AACT;AAEO,eAAe,mBAAmB,KAAmB;IAC1D,OAAQ,MAAM,IAAI;QAChB,KAAK;YAA8B;gBACjC,MAAM,UAAU,MAAM,IAAI,CAAC,MAAM;gBACjC,MAAM,SAAS,QAAQ,QAAQ,EAAE;gBACjC,MAAM,iBAAiB,QAAQ,YAAY;gBAE3C,IAAI,CAAC,QAAQ;oBACX,MAAM,IAAI,MAAM;gBAClB;gBAEA,2BAA2B;gBAC3B,MAAM,eAAe,MAAM,OAAO,aAAa,CAAC,QAAQ,CAAC;gBACzD,MAAM,OAAO,aAAa,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;gBAEhD,kCAAkC;gBAClC,MAAM,+GAAA,CAAA,SAAM,CAAC,YAAY,CAAC,MAAM,CAAC;oBAC/B,MAAM;wBACJ;wBACA,QAAQ;wBACR,QAAQ;wBACR,MAAM,uBAAuB;wBAC7B,WAAW,IAAI,KAAK,aAAa,kBAAkB,GAAG;oBACxD;gBACF;gBAEA;YACF;QAEA,KAAK;QACL,KAAK;YAAiC;gBACpC,MAAM,eAAe,MAAM,IAAI,CAAC,MAAM;gBACtC,MAAM,SAAS,aAAa,QAAQ,EAAE;gBAEtC,IAAI,CAAC,QAAQ;oBACX,MAAM,IAAI,MAAM;gBAClB;gBAEA,yCAAyC;gBACzC,MAAM,+GAAA,CAAA,SAAM,CAAC,YAAY,CAAC,UAAU,CAAC;oBACnC,OAAO;wBACL;wBACA,QAAQ;oBACV;oBACA,MAAM;wBACJ,QAAQ,aAAa,MAAM,KAAK,WAAW,WAAW;wBACtD,WAAW,IAAI,KAAK,aAAa,kBAAkB,GAAG;oBACxD;gBACF;gBAEA;YACF;IACF;AACF;AAEA,SAAS;IACP,OAAO,CAAC,GAAG,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,KAAK,KAAK,GAAG,GAAG,QAAQ,CAAC,KAAK;AAClF;AAEA,SAAS,uBAAuB,OAAe;IAC7C,MAAM,UAAkC;QACtC,aAAa;QACb,WAAW;QACX,kBAAkB;IACpB;IAEA,OAAO,OAAO,CAAC,QAAQ,IAAI;AAC7B","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///Users/didershine/Documents/accessibility-dashboard/app/api/checkout/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { createCheckoutSession } from \"@/lib/stripe\";\n\nexport async function POST(req: Request) {\n  try {\n    const { plan, email, name } = await req.json();\n    const session = await createCheckoutSession({ plan, email, name });\n    return NextResponse.json(session);\n  } catch (error) {\n    console.error(\"Checkout API error:\", error);\n    return NextResponse.json({ error: \"Failed to create checkout session\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAC5C,MAAM,UAAU,MAAM,CAAA,GAAA,+GAAA,CAAA,wBAAqB,AAAD,EAAE;YAAE;YAAM;YAAO;QAAK;QAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACF","debugId":null}}]
}