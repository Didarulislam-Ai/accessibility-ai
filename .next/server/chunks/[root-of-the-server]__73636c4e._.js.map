{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/didershine/Documents/accessibility-dashboard/app/api/pricing/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {\n  apiVersion: '2023-10-16',\n});\n\nexport async function GET() {\n  try {\n    // Define your Stripe Product IDs\n    const basicProductId = process.env.STRIPE_BASIC_PRODUCT_ID;\n    const proProductId = process.env.STRIPE_PRO_PRODUCT_ID;\n    const enterpriseProductId = process.env.STRIPE_ENTERPRISE_PRODUCT_ID;\n\n    if (!basicProductId || !proProductId || !enterpriseProductId) {\n      return NextResponse.json(\n        { error: 'Stripe Product IDs not configured' },\n        { status: 500 }\n      );\n    }\n\n    // Fetch all active products that are relevant\n    const products = await stripe.products.list({\n      active: true,\n    });\n\n    // Fetch all active prices\n    const prices = await stripe.prices.list({\n      active: true,\n      type: 'recurring',\n    });\n\n    const pricingData = products.data\n      .filter(product => \n        product.id === basicProductId || \n        product.id === proProductId || \n        product.id === enterpriseProductId\n      )\n      .map((product) => {\n        const productPrices = prices.data.filter(\n          (price) => price.product === product.id\n        );\n        // Assuming one recurring price per product for simplicity\n        const monthlyPrice = productPrices.find(price => price.recurring?.interval === 'month');\n\n        return {\n          id: product.id,\n          name: product.name,\n          description: product.description,\n          price: monthlyPrice && monthlyPrice.unit_amount !== null ? (monthlyPrice.unit_amount / 100).toFixed(0) : 'Contact Sales',\n          priceId: monthlyPrice?.id || null,\n          features: product.metadata.features ? JSON.parse(product.metadata.features) : [],\n        };\n      });\n\n    return NextResponse.json({ pricingData });\n  } catch (error) {\n    console.error('Error fetching Stripe pricing:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch pricing data' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,wJAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAY;IACjE,YAAY;AACd;AAEO,eAAe;IACpB,IAAI;QACF,iCAAiC;QACjC,MAAM,iBAAiB,QAAQ,GAAG,CAAC,uBAAuB;QAC1D,MAAM,eAAe,QAAQ,GAAG,CAAC,qBAAqB;QACtD,MAAM,sBAAsB,QAAQ,GAAG,CAAC,4BAA4B;QAEpE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,qBAAqB;YAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,8CAA8C;QAC9C,MAAM,WAAW,MAAM,OAAO,QAAQ,CAAC,IAAI,CAAC;YAC1C,QAAQ;QACV;QAEA,0BAA0B;QAC1B,MAAM,SAAS,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YACtC,QAAQ;YACR,MAAM;QACR;QAEA,MAAM,cAAc,SAAS,IAAI,CAC9B,MAAM,CAAC,CAAA,UACN,QAAQ,EAAE,KAAK,kBACf,QAAQ,EAAE,KAAK,gBACf,QAAQ,EAAE,KAAK,qBAEhB,GAAG,CAAC,CAAC;YACJ,MAAM,gBAAgB,OAAO,IAAI,CAAC,MAAM,CACtC,CAAC,QAAU,MAAM,OAAO,KAAK,QAAQ,EAAE;YAEzC,0DAA0D;YAC1D,MAAM,eAAe,cAAc,IAAI,CAAC,CAAA,QAAS,MAAM,SAAS,EAAE,aAAa;YAE/E,OAAO;gBACL,IAAI,QAAQ,EAAE;gBACd,MAAM,QAAQ,IAAI;gBAClB,aAAa,QAAQ,WAAW;gBAChC,OAAO,gBAAgB,aAAa,WAAW,KAAK,OAAO,CAAC,aAAa,WAAW,GAAG,GAAG,EAAE,OAAO,CAAC,KAAK;gBACzG,SAAS,cAAc,MAAM;gBAC7B,UAAU,QAAQ,QAAQ,CAAC,QAAQ,GAAG,KAAK,KAAK,CAAC,QAAQ,QAAQ,CAAC,QAAQ,IAAI,EAAE;YAClF;QACF;QAEF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAY;IACzC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}