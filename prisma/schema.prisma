datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  stripeCustomerId String?
  subscriptions    Subscription[]
  websites         Website[]
  accounts         Account[]
  sessions         Session[]
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accessibilityIssues AccessibilityIssue[]
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  apiKey    String   @unique
  status    String   @default("inactive")
  plan      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Website {
  id        String   @id @default(cuid())
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AccessibilityIssue {
  id          String   @id @default(cuid())
  userId      String
  page        String
  category    String
  description String
  element     String
  status      String   @default("open")
  severity    String
  fix         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fixedAt     DateTime?
  user        User     @relation(fields: [userId], references: [id])
}
